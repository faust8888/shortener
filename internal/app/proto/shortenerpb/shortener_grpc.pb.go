// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/app/proto/shortener.proto

package shortenerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortenerService_CreateShort_FullMethodName     = "/shortener.ShortenerService/CreateShort"
	ShortenerService_FindByHash_FullMethodName      = "/shortener.ShortenerService/FindByHash"
	ShortenerService_FindAllByUserID_FullMethodName = "/shortener.ShortenerService/FindAllByUserID"
	ShortenerService_CreateBatch_FullMethodName     = "/shortener.ShortenerService/CreateBatch"
	ShortenerService_DeleteLinks_FullMethodName     = "/shortener.ShortenerService/DeleteLinks"
	ShortenerService_GetStatistics_FullMethodName   = "/shortener.ShortenerService/GetStatistics"
)

// ShortenerServiceClient is the client API for ShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for URL shortener.
type ShortenerServiceClient interface {
	// Create short link from plain URL string.
	CreateShort(ctx context.Context, in *CreateShortRequest, opts ...grpc.CallOption) (*CreateShortResponse, error)
	// Redirect by hash: returns original URL and deletion status
	FindByHash(ctx context.Context, in *FindByHashRequest, opts ...grpc.CallOption) (*FindByHashResponse, error)
	// Find all URLs for authenticated user
	FindAllByUserID(ctx context.Context, in *FindAllByUserIDRequest, opts ...grpc.CallOption) (*FindAllByUserIDResponse, error)
	CreateBatch(ctx context.Context, in *BatchCreateRequest, opts ...grpc.CallOption) (*BatchCreateResponse, error)
	// Deletes multiple short links asynchronously.
	DeleteLinks(ctx context.Context, in *DeleteLinksRequest, opts ...grpc.CallOption) (*DeleteLinksResponse, error)
	// Retrieves statistics about shortened URLs and users.
	GetStatistics(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Statistic, error)
}

type shortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerServiceClient(cc grpc.ClientConnInterface) ShortenerServiceClient {
	return &shortenerServiceClient{cc}
}

func (c *shortenerServiceClient) CreateShort(ctx context.Context, in *CreateShortRequest, opts ...grpc.CallOption) (*CreateShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShortResponse)
	err := c.cc.Invoke(ctx, ShortenerService_CreateShort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) FindByHash(ctx context.Context, in *FindByHashRequest, opts ...grpc.CallOption) (*FindByHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByHashResponse)
	err := c.cc.Invoke(ctx, ShortenerService_FindByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) FindAllByUserID(ctx context.Context, in *FindAllByUserIDRequest, opts ...grpc.CallOption) (*FindAllByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllByUserIDResponse)
	err := c.cc.Invoke(ctx, ShortenerService_FindAllByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) CreateBatch(ctx context.Context, in *BatchCreateRequest, opts ...grpc.CallOption) (*BatchCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateResponse)
	err := c.cc.Invoke(ctx, ShortenerService_CreateBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) DeleteLinks(ctx context.Context, in *DeleteLinksRequest, opts ...grpc.CallOption) (*DeleteLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLinksResponse)
	err := c.cc.Invoke(ctx, ShortenerService_DeleteLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetStatistics(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Statistic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Statistic)
	err := c.cc.Invoke(ctx, ShortenerService_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServiceServer is the server API for ShortenerService service.
// All implementations must embed UnimplementedShortenerServiceServer
// for forward compatibility.
//
// Service definition for URL shortener.
type ShortenerServiceServer interface {
	// Create short link from plain URL string.
	CreateShort(context.Context, *CreateShortRequest) (*CreateShortResponse, error)
	// Redirect by hash: returns original URL and deletion status
	FindByHash(context.Context, *FindByHashRequest) (*FindByHashResponse, error)
	// Find all URLs for authenticated user
	FindAllByUserID(context.Context, *FindAllByUserIDRequest) (*FindAllByUserIDResponse, error)
	CreateBatch(context.Context, *BatchCreateRequest) (*BatchCreateResponse, error)
	// Deletes multiple short links asynchronously.
	DeleteLinks(context.Context, *DeleteLinksRequest) (*DeleteLinksResponse, error)
	// Retrieves statistics about shortened URLs and users.
	GetStatistics(context.Context, *EmptyRequest) (*Statistic, error)
	mustEmbedUnimplementedShortenerServiceServer()
}

// UnimplementedShortenerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortenerServiceServer struct{}

func (UnimplementedShortenerServiceServer) CreateShort(context.Context, *CreateShortRequest) (*CreateShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShort not implemented")
}
func (UnimplementedShortenerServiceServer) FindByHash(context.Context, *FindByHashRequest) (*FindByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByHash not implemented")
}
func (UnimplementedShortenerServiceServer) FindAllByUserID(context.Context, *FindAllByUserIDRequest) (*FindAllByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByUserID not implemented")
}
func (UnimplementedShortenerServiceServer) CreateBatch(context.Context, *BatchCreateRequest) (*BatchCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatch not implemented")
}
func (UnimplementedShortenerServiceServer) DeleteLinks(context.Context, *DeleteLinksRequest) (*DeleteLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLinks not implemented")
}
func (UnimplementedShortenerServiceServer) GetStatistics(context.Context, *EmptyRequest) (*Statistic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedShortenerServiceServer) mustEmbedUnimplementedShortenerServiceServer() {}
func (UnimplementedShortenerServiceServer) testEmbeddedByValue()                          {}

// UnsafeShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServiceServer will
// result in compilation errors.
type UnsafeShortenerServiceServer interface {
	mustEmbedUnimplementedShortenerServiceServer()
}

func RegisterShortenerServiceServer(s grpc.ServiceRegistrar, srv ShortenerServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortenerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortenerService_ServiceDesc, srv)
}

func _ShortenerService_CreateShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).CreateShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_CreateShort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).CreateShort(ctx, req.(*CreateShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_FindByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).FindByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_FindByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).FindByHash(ctx, req.(*FindByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_FindAllByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).FindAllByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_FindAllByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).FindAllByUserID(ctx, req.(*FindAllByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_CreateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).CreateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_CreateBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).CreateBatch(ctx, req.(*BatchCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_DeleteLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).DeleteLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_DeleteLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).DeleteLinks(ctx, req.(*DeleteLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetStatistics(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerService_ServiceDesc is the grpc.ServiceDesc for ShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.ShortenerService",
	HandlerType: (*ShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShort",
			Handler:    _ShortenerService_CreateShort_Handler,
		},
		{
			MethodName: "FindByHash",
			Handler:    _ShortenerService_FindByHash_Handler,
		},
		{
			MethodName: "FindAllByUserID",
			Handler:    _ShortenerService_FindAllByUserID_Handler,
		},
		{
			MethodName: "CreateBatch",
			Handler:    _ShortenerService_CreateBatch_Handler,
		},
		{
			MethodName: "DeleteLinks",
			Handler:    _ShortenerService_DeleteLinks_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _ShortenerService_GetStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/proto/shortener.proto",
}
